{"version":3,"sources":["logo.svg","Components/Scroll.js","Components/Card.js","Components/CardList.js","Components/SearchBox.js","Containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","Scroll","props","style","overflow","height","children","Card","className","role","src","id","name","email","CardList","robots","map","robot","i","key","SearchBox","searchChange","type","onChange","App","console","log","onSearchChange","event","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","toLowerCase","includes","length","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0JAAAA,EAAOC,QAAU,IAA0B,kC,8HCQ5BC,EAPF,SAACC,GACb,OACC,yBAAKC,MAAO,CAACC,SAAS,SAASC,OAAO,UACpCH,EAAMI,WCSKC,G,KAXJ,SAACL,GAER,OAAO,yBAAKM,UAAU,uCACnB,yBAAKC,KAAK,eAAeC,IAAG,yBAAoBR,EAAMS,GAA1B,mBAC5B,6BACL,wBAAIH,UAAU,MAAMN,EAAMU,MAC1B,uBAAGJ,UAAU,MAAMN,EAAMW,WCMZC,EAZA,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACd,OACI,6BAEFA,EAAOC,KAAI,SAACC,EAAMC,GAEd,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGP,GAAII,EAAOG,GAAGP,GAAIC,KAAMG,EAAOG,GAAGN,KAAMC,MAAOE,EAAOG,GAAGL,aCFxEO,EALC,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aACjB,OAAQ,6BACP,2BAAOC,KAAK,SAASC,SAAUF,MC2ClBG,G,8DApCb,aAAc,IAAD,6BACdC,QAAQC,IAAI,gBACZ,gBAWEC,eAAe,SAACC,GAClB,EAAKC,SAAS,CAACC,YAAYF,EAAMG,OAAOC,QACxCP,QAAQC,IAAI,EAAKO,MAAMH,cAZvB,EAAKG,MAAM,CACVlB,OAAO,GACPe,YAAY,IALC,E,gEAQQ,IAAD,OACrBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAE,EAAKT,SAAS,CAACd,OAAOuB,S,+BAMxB,IAAD,EACkBC,KAAKN,MAAlBH,GADL,EACHf,OADG,EACKe,aACTU,EAAeD,KAAKN,MAAMlB,OAAO0B,QAAO,SAAAxB,GAErC,OAAOA,EAAML,KAAK8B,cAAcC,SAASb,EAAYY,kBAG9D,OADAjB,QAAQC,IAAI,UACkB,IAA3Ba,KAAKN,MAAMlB,OAAO6B,OACV,0CAEE,yBAAKpC,UAAU,MACjB,kBAAC,EAAD,CAAWa,aAAckB,KAAKZ,iBACxC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUZ,OAAQyB,KAET,+D,GAjCMK,IAAMC,YCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.4b9751b6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nconst Scroll=(props)=>{\r\n\treturn(\r\n\t\t<div style={{overflow:'scroll',height:'500px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n}\r\nexport default Scroll;","import React from 'react';\r\nimport 'tachyons'\r\nconst Card=(props)=>\r\n{\r\n    return(<div className='bg-light-green dib br3 pa3 ma2 grow'>\r\n\t      <img role=\"presentation\" src={`//robohash.org/${props.id}?size=200x200`}/>\r\n\t      <div>\r\n\t\t<h2 className=\"tc\">{props.name}</h2>\r\n\t\t<p className=\"tc\">{props.email}</p>\r\n\t      </div>\r\n              </div>\r\n\t);\r\n}\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\nconst CardList=({robots}) => {\r\n   return (\r\n   \t   <div>\r\n\t\t{\r\n\t\t   robots.map((robot,i) => \r\n\t\t   {\r\n\t\t       return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />;\r\n   \t\t   })\r\n\t\t}\r\n\t    </div>);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nconst SearchBox=({searchChange})=>{\r\n\treturn (<div>\r\n\t\t<input type='search' onChange={searchChange} />\r\n\t          </div>);\r\n}\r\nexport default SearchBox;","import Scroll from '../Components/Scroll.js';\r\nimport {robots} from '../database.js';\r\nimport CardList from '../Components/CardList.js';\r\nimport SearchBox from '../Components/SearchBox.js';\r\nimport React from 'react';\r\nimport logo from '../logo.svg';\r\nimport '../App.css';\r\nimport 'tachyons'\r\n\r\nclass App extends React.Component {\r\n  constructor(){\r\n\tconsole.log(\"constructor\");\r\n\tsuper();\r\n\tthis.state={\r\n\t\trobots:[],\r\n\t\tsearchField:''\r\n\t};\t\r\n   }\r\n   componentDidMount(){\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response => response.json())\r\n\t.then(users=>this.setState({robots:users}));\r\n   }\r\n   onSearchChange=(event)=>{\r\n\tthis.setState({searchField:event.target.value});\r\n\tconsole.log(this.state.searchField);\t\r\n   }\r\n   render(){\r\n\tconst {robots, searchField}=this.state;\r\n\tconst filteredRobots=this.state.robots.filter(robot=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t     return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t\t\t\t});\r\n\tconsole.log(\"render\");\r\n\tif(this.state.robots.length===0)\r\n\t     return<h1>loading...</h1>\r\n\telse\r\n\t     return (<div className='tc'>\r\n          \t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t<Scroll>\r\n\t\t\t<CardList robots={filteredRobots} />\r\n\t\t</Scroll>\r\n          \t\t<footer>Ahmadipoor.h@gmail.com</footer>\r\n    \t            </div> );\r\n   } \r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}